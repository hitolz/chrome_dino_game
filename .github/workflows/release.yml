name: Release Game

on:
  push:
    tags:
      - 'v*'  # 当推送 v* 标签时触发

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 恐龙游戏 ${{ github.ref }}
        body: |
          ## 🦕 恐龙游戏新版本发布！
          
          ### 📦 下载链接
          请根据你的操作系统选择对应的版本：
          
          - **Windows (x64)**: dino_game.exe
          - **Windows (ARM64)**: dino_game-arm64.exe  
          - **Linux (x64)**: dino_game-linux
          - **macOS (Intel)**: dino_game-macos-intel
          - **macOS (Apple Silicon)**: dino_game-macos-arm64
          
          ### 🎮 游戏说明
          - 空格键：跳跃
          - ESC键：退出游戏
          - 躲避仙人掌，获得高分！
          
          ### 🐛 问题反馈
          如果遇到问题，请在 Issues 中反馈。
        draft: false
        prerelease: false

  build:
    name: Build and Upload
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: dino_game.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: dino_game-arm64.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: dino_game-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: dino_game-macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: dino_game-macos-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxkbcommon-dev
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare release package
      shell: bash
      run: |
        # 创建发布目录
        mkdir -p release-package
        
        # 复制可执行文件
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/dino_game.exe release-package/
        else
          cp target/${{ matrix.target }}/release/dino_game release-package/
        fi
        
        # 复制游戏资源
        cp -r assets release-package/
        cp README.md release-package/ 2>/dev/null || true
        
        # 创建压缩包
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cd release-package && zip -r ../${{ matrix.artifact }}.zip . && cd ..
        else
          tar -czf ${{ matrix.artifact }}.tar.gz -C release-package .
        fi
    
    - name: Upload Windows Release Asset
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact }}.zip
        asset_name: ${{ matrix.artifact }}.zip
        asset_content_type: application/zip
    
    - name: Upload Unix Release Asset
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact }}.tar.gz
        asset_name: ${{ matrix.artifact }}.tar.gz
        asset_content_type: application/gzip
